<!--
https://logback.qos.ch/manual/index.html
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
            当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />-->

    <!--用来定义变量值-->
    <property name="APP_NAME" value="myAppName"/>
    <property name="LOG_HOME" value="logs"/>
    <!--<property file="src/main/java/chapters/configuration/variables1.properties" />-->
    <!--获取时间戳字符串-->
    <timestamp key="BY_SECOND" datePattern="yyyy-MM-dd-HH-mm-ss"/>
    <!--
    用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。
    但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
    -->
    <contextName>${APP_NAME}</contextName>
    <!--负责写日志的组件，它有两个必要属性name和class-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--对日志进行格式化-->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--默认true 设置为false可以更高的吞吐量，但appender在意外退出时，无法正确关闭，会丢失部分日志-->
        <immediateFlush>true</immediateFlush>
    </appender>
    　
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/testFile.log</file>
        <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
        <append>true</append>
        <!--对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流-->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
    <!--
    滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
    当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。
    -->
    <appender name="ROLLING_FILE_1" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动
        上述配置表示每天生成一个日志文件，保存30天的日志文件
        TimeBasedRollingPolicy支持自动文件压缩。如果fileNamePattern选项的值以.gz或.zip结尾，则启用此功能。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
            必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，
            如：%d{yyyy-MM}。 如果直接使用 %d，默认格式是 yyyy-MM-dd。
            RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，
            当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
            如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
            -->　　　　　
            <fileNamePattern>${LOG_HOME}/logFile.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
            假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。
            注意，删除旧文件是，那些为了归档而创建的目录也会被删除。 -->　　　　　　　　　
            <maxHistory>30</maxHistory>
            <!--每个文件100MB-->
            <maxFileSize>100MB</maxFileSize>
            <!--
            可选的totalSizeCap属性控制所有存档文件的总大小。超过总大小上限时，将异步删除最旧的归档。
            totalSizeCap属性也需要设置maxHistory属性。
            此外，始终首先应用“最大历史记录”限制，然后应用“总大小上限”限制。
            -->
            <totalSizeCap>100GB</totalSizeCap>
            <!--启动时删除历史记录 默认false-->
            <cleanHistoryOnStart>false</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--邮件-->
    <appender name="ROLLING_FILE_2" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/ROLLING_FILE_2.log</file>
        <!--
        根据固定窗口算法重命名文件的滚动策略
        备注：配置表示按照固定窗口模式生成日志文件，当文件大于5MB时，生成新的日志文件。
        窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!--
            必须包含“%i”
            例如，假设最小值和最大值分别为1和2，
            命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。
            还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 log%i.log.zip
            -->
            <fileNamePattern>tests.%i.log.zip</fileNamePattern>
            <!--窗口索引最小值-->
            <minIndex>1</minIndex>
            <!--窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12-->
            <maxIndex>3</maxIndex>
        </rollingPolicy>
        <!--告知 RollingFileAppender 合适激活滚动-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--这是活动文件的大小，默认值是10MB。-->
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
    <!--
    查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。
    -->
    <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
        <smtpHost>smtp.gmail.com</smtpHost>
        <smtpPort>465</smtpPort>
        <SSL>true</SSL>
        <username>zhaoxiufei@gmail.com</username>
        <password>xxxxx</password>
        <!--可以配置多个 to-->
        <to>zhaoxiufei@123.cn</to>
        <from>zhaoxiufei@345.com</from>
        <subject>TESTING: %logger{20} - %m</subject>
        <layout class="ch.qos.logback.classic.html.HTMLLayout"/>
        <asynchronousSending>false</asynchronousSending>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
            <!-- 每个电子邮件只发送一个日志条目 -->
            <bufferSize>1</bufferSize>
        </cyclicBufferTracker>
    </appender>
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE" />
    </appender>
    <!--
    用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>
    <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
    可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    name:用来指定受此loger约束的某一个包或者具体的某一个类
    用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，
    还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
    如果未设置此属性，那么当前logger将会继承上级的级别。
    addtivity: 是否向上级logger传递打印信息。默认是true。
    同<logger>一样， 可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
    -->
    <logger name="javax.mail" level="DEBUG" addtivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="com.github.microservice" level="DEBUG" addtivity="false">
        <appender-ref ref="ROLLING_FILE_2"/>
    </logger>
    <logger name="com.github.microservice" level="DEBUG" addtivity="false">
        <appender-ref ref="ASYNC"/>
    </logger>
    <!--
    它也是<logger>元素，但是它是根logger,是所有<logger>的上级。
    只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
　　 level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，
    不能设置为INHERITED或者同义词NULL。 默认是DEBUG。
    logback的配置，需要配置输出源appender，打日志的logger（子节点）和root（根节点），
    实际上，它输出日志是从子节点开始，子节点如果有输出源直接输入，
    如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，否则不输出日志。
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>
